function BytesToString(bytes) --Made by Philippe Lhoste
  local s = ""
  for i = 1, table.getn(bytes) do
    s = s .. string.char(bytes[i])
  end
  return s
end

--MAP HEADERS

HEADER_SMALL = {0x1d, 0x00, 0x02, 0x00, 0x4c, 0x00, 0x01, 0x74, 0x74, 0x00, 0x00, 0x00, 0x09, 0x00, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
HEADER_MEDIUM = {0x1d, 0x00, 0x02, 0x00, 0x98, 0x00, 0x01, 0x30, 0x50, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x6d, 0x61, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
HEADER_LARGE = {0x1d, 0x00, 0x02, 0x00, 0xe4, 0x00, 0x01, 0xdd, 0x4c, 0x00, 0x00, 0x00, 0x09, 0x00, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}
HEADER_EXTRA_LARGE = {0x1d, 0x00, 0x02, 0x00, 0x30, 0x01, 0x01, 0x80, 0x69, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}

--REMINDER ABOUT MAP SIZES:
--Small: 76 rows and cols
--Medium: 152 rows and cols
--Large: 228 rows and cols
--Extra-Large: 304 rows and cols

--TERRAIN TYPES

TERRAIN_W_SHALLOW = {0x00, 0x00} --water, shallow
TERRAIN_W_DEEP = {0x00, 0x01} --water, deep
TERRAIN_G_LUSH = {0x01, 0x01} --grass lush
TERRAIN_G_DRY = {0x01, 0x00} --grass dry
TERRAIN_R_ROCK = {0x02, 0x00} --rough rocky
TERRAIN_R_SUN = {0x02, 0x01} --rough sun-baked
TERRAIN_S_DEEP = {0x03, 0x00} --swamp, deep
TERRAIN_S_SWALLOW = {0x03, 0x01} --swamp, shallow
TERRAIN_V_HOT = {0x04, 0x00} --volcanic, hot
TERRAIN_V_COOL = {0x04, 0x01} --volcanic 0xcool
TERRAIN_SNOW = {0x05, 0x00} --snow
TERRAIN_ICE = {0x05, 0x01} --ice
TERRAIN_S_BEACH = {0x06, 0x00} --sand, beach
TERRAIN_S_DESERT = {0x06, 0x01} --sand, desert
TERRAIN_DIRT = {0x07, 0x00} --dirt
TERRAIN_D_MOSSY = {0x07, 0x01} --dirt, mossy
TERRAIN_SUBT_DIRT = {0x08, 0x00} --subterranean, dirt
TERRAIN_SUBT_ROCK = {0x08, 0x01} --subterranean, rock
TERRAIN_W_RIVER = {0x09, 0x00} --water river
TERRAIN_L_RIVER = {0x0a, 0x00} --lava river
TERRAIN_I_RIVER = {0x0b, 0x00} --ice river
TERRAIN_MAGIC = {0x0c, 0x00} --magic plains
TERRAIN_LIFE = {0x0d, 0x00} --field of life
TERRAIN_ENCH = {0x0e, 0x00} --enchanted stone
TERRAIN_CURSED = {0x0f, 0x00} --cursed ground
TERRAIN_SCORCHED = {0x10, 0x00} --scorched earth
TERRAIN_GARDEN = {0x11, 0x00} --magic garden
TERRAIN_GLORY = {0x12, 0x00} --field of glory

TERRAIN_NEXT = {0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00} --This comes after terain type
    
function StringMap(size,filename)
    local loc_string = ""
    if size == "S" or size == "Small" or size == "SMALL" or size == "small" then
        sizeof = 76
        loc_string = loc_string .. BytesToString(HEADER_SMALL)
    elseif size == "M" or size == "Medium" or size == "MEDIUM" or size == "medium" then
        sizeof = 152
        loc_string = loc_string .. BytesToString(HEADER_MEDIUM)
    elseif size == "L" or size == "Large" or size == "LARGE" or size == "large" then
        sizeof = 228
        loc_string = loc_string .. BytesToString(HEADER_LARGE)
    elseif size == "XL" or size == "Extra-Large" or size == "EXTRA-LARGE" or size == "extra-large" then
        sizeof = 304
        loc_string = loc_string .. BytesToString(HEADER_EXTRA_LARGE)
    else error("\nThe first argument has to be \'SMALL\',\'MEDIUM\', \'LARGE\' or \'EXTRA-LARGE\'!\n") end
    if filename == nil then
        error("\nYou need to give a second argument too, dummy!\n")
    end
    local import = ImportImage(filename)
    if import == false then
        error("Failed to import image.")
    end
    bytemap = {}
    for i=1,sizeof,+1 do
        bytemap[i] = {}
        for z=1,sizeof,+1 do
            bytemap[i][z] = {}
            bytemap[i][z][1], bytemap[i][z][2] = CatchColour(i,z)
        end
    end
    for i=1,sizeof/2,+1 do
        loc_string = loc_string .. BytesToString(bytemap[i][sizeof/2 - i + 1]) .. BytesToString(TERRAIN_NEXT)
        loc_string = loc_string .. BytesToString(bytemap[i][sizeof/2 - i + 2]) .. BytesToString(TERRAIN_NEXT)
    end
    for i=(sizeof/2 + 1),sizeof,+1 do
        loc_string = loc_string .. BytesToString(bytemap[i][sizeof - (sizeof/2 - i) + 1]) .. BytesToString(TERRAIN_NEXT)
        loc_string = loc_string .. BytesToString(bytemap[i][sizeof - (sizeof/2 - i) + 2]) .. BytesToString(TERRAIN_NEXT)
    end
    return loc_string
end

